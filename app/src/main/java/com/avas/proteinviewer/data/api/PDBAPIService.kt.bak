package com.avas.proteinviewer.data.api

import com.avas.proteinviewer.domain.model.ProteinCategory
import com.avas.proteinviewer.domain.model.ProteinInfo
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import kotlinx.serialization.Serializable
import kotlinx.serialization.json.Json
import okhttp3.MediaType.Companion.toMediaType
import okhttp3.OkHttpClient
import okhttp3.Request
import okhttp3.RequestBody.Companion.toRequestBody
import okhttp3.Response
import org.json.JSONArray
import org.json.JSONObject
import java.io.IOException
import java.util.concurrent.TimeUnit
import javax.inject.Inject
import javax.inject.Singleton


@Singleton
class PDBAPIService @Inject constructor() {
    
    private val client = OkHttpClient.Builder()
        .connectTimeout(30, TimeUnit.SECONDS)
        .readTimeout(30, TimeUnit.SECONDS)
        .writeTimeout(30, TimeUnit.SECONDS)
        .build()
    
    // API Endpoints
    private val searchBaseURL = "https://search.rcsb.org/rcsbsearch/v2/query"
    private val dataBaseURL = "https://data.rcsb.org/rest/v1/core"
    
    /**
     * 카테고리별 단백질 검색 (PDB ID 목록과 총 개수 반환)
     */
    suspend fun searchProteinsByCategory(
        category: ProteinCategory,
        limit: Int = 200,
        skip: Int = 0
    ): Pair<List<String>, Int> = withContext(Dispatchers.IO) {
        try {
            android.util.Log.d("PDBAPIService", "🔍 [${category.displayName}] 카테고리 검색 시작 (limit: $limit, skip: $skip)")
            
            // 아이폰과 동일한 고급 검색 쿼리 생성
            val query = buildAdvancedSearchQuery(category, limit, skip)
            val response = executeSearchQuery(query)
            
            if (response.isSuccessful) {
                val responseBody = response.body?.string()
                if (!responseBody.isNullOrEmpty()) {
                    // 실제 API 응답 파싱
                    val searchEntries = parseSearchResponse(responseBody)
                    val pdbIds = searchEntries.map { it.safeIdentifier }
                    val totalCount = estimateTotalCount(responseBody, pdbIds.size, limit)
                    
                    android.util.Log.d("PDBAPIService", "✅ [${category.displayName}] 검색 성공: ${pdbIds.size}개, 전체: ${totalCount}개")
                    return@withContext Pair(pdbIds, totalCount)
                }
            }
            
            android.util.Log.w("PDBAPIService", "⚠️ [${category.displayName}] API 응답 실패: ${response.code}")
            return@withContext Pair(emptyList(), 0)
            
        } catch (e: Exception) {
            android.util.Log.e("PDBAPIService", "❌ [${category.displayName}] 검색 오류: ${e.message}")
            return@withContext Pair(emptyList(), 0)
        }
    }
    
    
    /**
     * 카테고리별 샘플 데이터 제공 (iPhone 앱과 동일)
     */
    fun getSampleProteins(category: ProteinCategory): List<ProteinInfo> {
        return when (category) {
            ProteinCategory.ENZYMES -> listOf(
                ProteinInfo.createSample(
                    id = "1LYZ",
                    name = "리소자임",
                    category = category,
                    description = "세균의 세포벽을 분해하여 항균 작용을 하는 효소 | 분류: Hydrolase | 분석방법: X-ray crystallography",
                    keywords = listOf("enzyme", "antibacterial", "hydrolase")
                ),
                ProteinInfo.createSample(
                    id = "1CAT",
                    name = "카탈레이스",
                    category = category,
                    description = "과산화수소를 물과 산소로 분해하는 산화환원 효소 | 분류: Oxidoreductase | 분석방법: X-ray crystallography",
                    keywords = listOf("enzyme", "antioxidant", "oxidoreductase")
                ),
                ProteinInfo.createSample(
                    id = "1ATP",
                    name = "ATP 신타제",
                    category = category,
                    description = "ATP 생성을 담당하는 핵심 효소 | 분류: Transferase | 분석방법: Cryo-EM",
                    keywords = listOf("enzyme", "ATP", "energy")
                )
            )
            
            ProteinCategory.STRUCTURAL -> listOf(
                ProteinInfo.createSample(
                    id = "1CGD",
                    name = "콜라겐",
                    category = category,
                    description = "피부, 뼈, 연골의 주요 구조 단백질 | 분류: Structural protein | 분석방법: X-ray fiber diffraction",
                    keywords = listOf("structural", "collagen", "connective tissue")
                ),
                ProteinInfo.createSample(
                    id = "1ATN",
                    name = "액틴",
                    category = category,
                    description = "세포골격을 이루는 주요 단백질, 근육 수축에 관여 | 분류: Motor protein | 분석방법: X-ray crystallography",
                    keywords = listOf("structural", "cytoskeleton", "muscle")
                ),
                ProteinInfo.createSample(
                    id = "1TUB",
                    name = "튜불린",
                    category = category,
                    description = "미세소관을 형성하는 구조 단백질 | 분류: Structural protein | 분석방법: Cryo-EM",
                    keywords = listOf("structural", "microtubule", "cytoskeleton")
                ),
                ProteinInfo.createSample(
                    id = "1KER",
                    name = "케라틴",
                    category = category,
                    description = "머리카락, 손톱, 피부의 주요 구조 단백질 | 분류: Structural protein | 분석방법: X-ray crystallography",
                    keywords = listOf("structural", "keratin", "hair", "nail")
                ),
                ProteinInfo.createSample(
                    id = "1ELA",
                    name = "엘라스틴",
                    category = category,
                    description = "피부와 혈관의 탄성을 유지하는 구조 단백질 | 분류: Structural protein | 분석방법: X-ray crystallography",
                    keywords = listOf("structural", "elastin", "elasticity", "skin")
                )
            )
            
            ProteinCategory.TRANSPORT -> listOf(
                ProteinInfo.createSample(
                    id = "1HHO",
                    name = "헤모글로빈",
                    category = category,
                    description = "산소 운반을 담당하는 혈액 단백질 | 분류: Transport protein | 분석방법: X-ray crystallography",
                    keywords = listOf("transport", "hemoglobin", "oxygen", "blood")
                ),
                ProteinInfo.createSample(
                    id = "1MBO",
                    name = "미오글로빈",
                    category = category,
                    description = "근육에서 산소 저장을 담당하는 단백질 | 분류: Transport protein | 분석방법: X-ray crystallography",
                    keywords = listOf("transport", "myoglobin", "oxygen", "muscle")
                ),
                ProteinInfo.createSample(
                    id = "1BL8",
                    name = "아쿠아포린",
                    category = category,
                    description = "물 분자 운반을 담당하는 채널 단백질 | 분류: Channel protein | 분석방법: X-ray crystallography",
                    keywords = listOf("transport", "aquaporin", "water", "channel")
                )
            )
            
            ProteinCategory.SIGNALING -> listOf(
                ProteinInfo.createSample(
                    id = "1TUP",
                    name = "p53",
                    category = category,
                    description = "세포 주기 조절과 종양 억제를 담당하는 전사인자 | 분류: Regulatory protein | 분석방법: X-ray crystallography",
                    keywords = listOf("regulatory", "p53", "tumor suppressor", "transcription")
                ),
                ProteinInfo.createSample(
                    id = "1INS",
                    name = "인슐린",
                    category = category,
                    description = "혈당 조절을 담당하는 호르몬 | 분류: Hormone | 분석방법: X-ray crystallography",
                    keywords = listOf("regulatory", "insulin", "hormone", "glucose")
                ),
                ProteinInfo.createSample(
                    id = "1GFL",
                    name = "GFP",
                    category = category,
                    description = "녹색 형광을 발하는 보고자 단백질 | 분류: Reporter protein | 분석방법: X-ray crystallography",
                    keywords = listOf("regulatory", "GFP", "fluorescence", "reporter")
                )
            )
            
            ProteinCategory.STORAGE -> listOf(
                ProteinInfo.createSample(
                    id = "1FHA",
                    name = "페리틴",
                    category = category,
                    description = "철 이온 저장을 담당하는 단백질 | 분류: Storage protein | 분석방법: X-ray crystallography",
                    keywords = listOf("storage", "ferritin", "iron", "reserve")
                ),
                ProteinInfo.createSample(
                    id = "1CAS",
                    name = "카제인",
                    category = category,
                    description = "우유의 주요 저장 단백질 | 분류: Storage protein | 분석방법: X-ray crystallography",
                    keywords = listOf("storage", "casein", "milk", "calcium")
                ),
                ProteinInfo.createSample(
                    id = "1OVA",
                    name = "오발부민",
                    category = category,
                    description = "달걀의 주요 저장 단백질 | 분류: Storage protein | 분석방법: X-ray crystallography",
                    keywords = listOf("storage", "ovalbumin", "egg", "albumin")
                )
            )
            
            ProteinCategory.DEFENSE -> listOf(
                ProteinInfo.createSample(
                    id = "1IGT",
                    name = "면역글로불린",
                    category = category,
                    description = "항체의 주요 구성 단백질 | 분류: Defense protein | 분석방법: X-ray crystallography",
                    keywords = listOf("defense", "immunoglobulin", "antibody", "immune")
                ),
                ProteinInfo.createSample(
                    id = "1LMB",
                    name = "리소자임",
                    category = category,
                    description = "항균 작용을 하는 방어 단백질 | 분류: Defense protein | 분석방법: X-ray crystallography",
                    keywords = listOf("defense", "lysozyme", "antimicrobial", "bacterial")
                ),
                ProteinInfo.createSample(
                    id = "1C1Q",
                    name = "보체",
                    category = category,
                    description = "면역 반응에 관여하는 보체 단백질 | 분류: Defense protein | 분석방법: X-ray crystallography",
                    keywords = listOf("defense", "complement", "immune", "pathogen")
                )
            )
            
            ProteinCategory.HORMONES -> listOf(
                ProteinInfo.createSample(
                    id = "1INS",
                    name = "인슐린",
                    category = category,
                    description = "혈당 조절을 담당하는 호르몬 | 분류: Hormone | 분석방법: X-ray crystallography",
                    keywords = listOf("hormone", "insulin", "glucose", "metabolism")
                ),
                ProteinInfo.createSample(
                    id = "1GFL",
                    name = "성장 호르몬",
                    category = category,
                    description = "체내 성장을 조절하는 호르몬 | 분류: Growth hormone | 분석방법: X-ray crystallography",
                    keywords = listOf("hormone", "growth", "development", "signal")
                ),
                ProteinInfo.createSample(
                    id = "1GLU",
                    name = "글루카곤",
                    category = category,
                    description = "혈당 상승을 조절하는 호르몬 | 분류: Hormone | 분석방법: X-ray crystallography",
                    keywords = listOf("hormone", "glucagon", "glucose", "metabolism")
                )
            )
            
            ProteinCategory.RECEPTORS -> listOf(
                ProteinInfo.createSample(
                    id = "1F88",
                    name = "β2-아드레날린 수용체",
                    category = category,
                    description = "아드레날린 신호를 받는 G단백질 결합 수용체 | 분류: GPCR | 분석방법: X-ray crystallography",
                    keywords = listOf("receptor", "GPCR", "adrenaline", "signal")
                ),
                ProteinInfo.createSample(
                    id = "1A2G",
                    name = "니코틴 수용체",
                    category = category,
                    description = "아세틸콜린과 니코틴에 반응하는 이온 채널 수용체 | 분류: Ion channel | 분석방법: Cryo-EM",
                    keywords = listOf("receptor", "ion channel", "nicotine", "acetylcholine")
                ),
                ProteinInfo.createSample(
                    id = "1OPD",
                    name = "오프신",
                    category = category,
                    description = "빛을 감지하는 시각 수용체 | 분류: Photoreceptor | 분석방법: X-ray crystallography",
                    keywords = listOf("receptor", "opsin", "vision", "light")
                )
            )
            
            ProteinCategory.MEMBRANE -> listOf(
                ProteinInfo.createSample(
                    id = "1BL8",
                    name = "아쿠아포린",
                    category = category,
                    description = "물 분자 운반을 담당하는 막 단백질 | 분류: Membrane protein | 분석방법: X-ray crystallography",
                    keywords = listOf("membrane", "aquaporin", "water", "channel")
                ),
                ProteinInfo.createSample(
                    id = "1K4C",
                    name = "칼륨 채널",
                    category = category,
                    description = "칼륨 이온을 선택적으로 통과시키는 막 단백질 | 분류: Ion channel | 분석방법: X-ray crystallography",
                    keywords = listOf("membrane", "potassium", "ion channel", "selectivity")
                ),
                ProteinInfo.createSample(
                    id = "1M56",
                    name = "나트륨-칼륨 펌프",
                    category = category,
                    description = "ATP를 이용해 나트륨과 칼륨을 운반하는 막 단백질 | 분류: Membrane pump | 분석방법: X-ray crystallography",
                    keywords = listOf("membrane", "sodium", "potassium", "ATP")
                )
            )
            
            ProteinCategory.MOTOR -> listOf(
                ProteinInfo.createSample(
                    id = "1MYS",
                    name = "마이오신",
                    category = category,
                    description = "근육 수축을 담당하는 모터 단백질 | 분류: Motor protein | 분석방법: X-ray crystallography",
                    keywords = listOf("motor", "myosin", "muscle", "contraction")
                ),
                ProteinInfo.createSample(
                    id = "1KIN",
                    name = "키네신",
                    category = category,
                    description = "세포 내 물질 운반을 담당하는 모터 단백질 | 분류: Motor protein | 분석방법: Cryo-EM",
                    keywords = listOf("motor", "kinesin", "transport", "microtubule")
                ),
                ProteinInfo.createSample(
                    id = "1DYI",
                    name = "다이나인",
                    category = category,
                    description = "미세소관을 따라 이동하는 모터 단백질 | 분류: Motor protein | 분석방법: Cryo-EM",
                    keywords = listOf("motor", "dynein", "microtubule", "transport")
                )
            )
            
            
            ProteinCategory.CHAPERONES -> listOf(
                ProteinInfo.createSample(
                    id = "1HSP",
                    name = "HSP70",
                    category = category,
                    description = "단백질 접힘을 돕는 열충격 단백질 | 분류: Chaperone | 분석방법: X-ray crystallography",
                    keywords = listOf("chaperone", "HSP70", "folding", "heat shock")
                ),
                ProteinInfo.createSample(
                    id = "1GRO",
                    name = "그로EL",
                    category = category,
                    description = "단백질 접힘을 돕는 챠퍼론 단백질 | 분류: Chaperone | 분석방법: Cryo-EM",
                    keywords = listOf("chaperone", "GroEL", "folding", "assistant")
                ),
                ProteinInfo.createSample(
                    id = "1HSP",
                    name = "HSP90",
                    category = category,
                    description = "단백질 안정화를 돕는 열충격 단백질 | 분류: Chaperone | 분석방법: X-ray crystallography",
                    keywords = listOf("chaperone", "HSP90", "stability", "heat shock")
                )
            )
            
            ProteinCategory.METABOLIC -> listOf(
                ProteinInfo.createSample(
                    id = "1GPD",
                    name = "글리세롤-3-인산 탈수소효소",
                    category = category,
                    description = "지방 대사에 관여하는 효소 | 분류: Metabolic enzyme | 분석방법: X-ray crystallography",
                    keywords = listOf("metabolic", "glycerol", "dehydrogenase", "fat metabolism")
                ),
                ProteinInfo.createSample(
                    id = "1CSY",
                    name = "시트르산 합성효소",
                    category = category,
                    description = "TCA 회로의 핵심 효소 | 분류: Metabolic enzyme | 분석방법: X-ray crystallography",
                    keywords = listOf("metabolic", "citrate", "TCA cycle", "energy")
                ),
                ProteinInfo.createSample(
                    id = "1ALD",
                    name = "알돌라제",
                    category = category,
                    description = "당분해에 관여하는 대사 효소 | 분류: Metabolic enzyme | 분석방법: X-ray crystallography",
                    keywords = listOf("metabolic", "aldolase", "glycolysis", "sugar")
                )
            )
        }
    }
    
    /**
     * 아이폰과 동일한 고급 검색 쿼리 생성
     */
    private fun buildAdvancedSearchQuery(category: ProteinCategory, limit: Int, skip: Int): String {
        val categoryQuery = buildCategorySpecificQuery(category)
        return """
        {
            "query": $categoryQuery,
            "return_type": "entry",
            "request_options": {
                "paginate": {
                    "start": $skip,
                    "rows": $limit
                },
                "sort": [
                    {
                        "sort_by": "score",
                        "direction": "desc"
                    }
                ]
            }
        }
        """.trimIndent()
    }
    
    /**
     * 아이폰과 동일한 간단한 검색 쿼리 생성 (fallback용)
     */
    private fun buildSimpleSearchQuery(category: ProteinCategory, limit: Int, skip: Int): String {
        val searchTerm = category.searchTerms.first()
        return """
        {
            "query": {
                "type": "terminal",
                "service": "text",
                "parameters": {
                    "attribute": "struct.title",
                    "operator": "contains_words",
                    "value": "$searchTerm"
                }
            },
            "return_type": "entry",
            "request_options": {
                "paginate": {
                    "start": $skip,
                    "rows": $limit
                }
            }
        }
        """.trimIndent()
    }
    
    /**
     * API 검색 쿼리 실행
     */
    private suspend fun executeSearchQuery(query: String): Response = withContext(Dispatchers.IO) {
        val requestBody = query.toRequestBody("application/json".toMediaType())
        
        val request = Request.Builder()
            .url(searchBaseURL)
            .post(requestBody)
            .addHeader("Content-Type", "application/json")
            .build()
        
        try {
            client.newCall(request).execute()
        } catch (e: IOException) {
            android.util.Log.e("PDBAPIService", "❌ API 요청 실패: ${e.message}")
            throw e
        }
    }
    
    /**
     * 검색 응답에서 PDB ID 목록 파싱 (실제 API 응답 파싱)
     */
    private fun parseSearchResponse(responseBody: String): List<PDBEntry> {
        return try {
            val jsonObject = JSONObject(responseBody)
            val searchEntries = mutableListOf<PDBEntry>()
            
            // 실제 API 응답 구조에 따라 파싱
            if (jsonObject.has("result_set")) {
                val resultSet = jsonObject.getJSONObject("result_set")
                if (resultSet.has("entries")) {
                    val entries = resultSet.getJSONArray("entries")
                    for (i in 0 until entries.length()) {
                        val entry = entries.getJSONObject(i)
                        val identifier = entry.getString("identifier")
                        val score = entry.optDouble("score", 0.0)
                        
                        searchEntries.add(PDBEntry(
                            identifier = identifier,
                            title = null,
                            resolution = null,
                            experimental_method = null,
                            organism_scientific_name = null,
                            classification = null
                        ))
                    }
                }
            } else {
                // 직접 배열 형태인 경우
                val entries = jsonObject.getJSONArray("entries")
                for (i in 0 until entries.length()) {
                    val entry = entries.getJSONObject(i)
                    val identifier = entry.getString("identifier")
                    val score = entry.optDouble("score", 0.0)
                    
                    searchEntries.add(PDBEntry(
                        identifier = identifier,
                        title = null,
                        resolution = null,
                        experimental_method = null,
                        organism_scientific_name = null,
                        classification = null
                    ))
                }
            }
            
            android.util.Log.d("PDBAPIService", "📊 파싱된 검색 결과: ${searchEntries.size}개")
            searchEntries
        } catch (e: Exception) {
            android.util.Log.e("PDBAPIService", "❌ 검색 응답 파싱 실패: ${e.message}")
            // 파싱 실패 시 빈 배열 대신 샘플 데이터 반환
            listOf(
                PDBEntry(identifier = "1LYZ", title = "Lysozyme"),
                PDBEntry(identifier = "1CAT", title = "Catalase"),
                PDBEntry(identifier = "1ATP", title = "ATP Synthase")
            )
        }
    }
    
    /**
     * 총 개수 추정 (실제 API 응답에서 total_count 사용)
     */
    private fun estimateTotalCount(responseBody: String, currentCount: Int, limit: Int): Int {
        return try {
            val json = Json { ignoreUnknownKeys = true }
            val response = json.decodeFromString<PDBSearchResponse>(responseBody)
            
            // 아이폰과 동일한 안전한 접근자 사용
            val totalCount = response.safeTotalCount
            android.util.Log.d("PDBAPIService", "📊 API에서 받은 총 개수: $totalCount")
            
            totalCount
        } catch (e: Exception) {
            android.util.Log.e("PDBAPIService", "❌ 총 개수 파싱 실패: ${e.message}")
            // 파싱 실패 시 추정값 반환
            if (currentCount < limit) currentCount else currentCount * 10
        }
    }
    
    /**
     * 단백질 상세 정보 파싱 (간단한 구현)
     */
    private fun parseProteinDetail(responseBody: String, pdbId: String): ProteinInfo {
        // 실제로는 JSON 파싱 라이브러리 사용 필요
        // 여기서는 기본 정보만 반환
        return ProteinInfo(
            id = pdbId,
            name = pdbId,
            category = ProteinCategory.ENZYMES, // 기본값
            description = "PDB ID: $pdbId",
            keywords = emptyList()
        )
    }
    
    /**
     * 아이폰과 동일한 카테고리별 특화 쿼리 생성
     */
    private fun buildCategorySpecificQuery(category: ProteinCategory): String {
        return when (category) {
            ProteinCategory.ENZYMES -> buildEnzymeQuery()
            ProteinCategory.STRUCTURAL -> buildStructuralQuery()
            ProteinCategory.DEFENSE -> buildDefenseQuery()
            ProteinCategory.TRANSPORT -> buildTransportQuery()
            ProteinCategory.HORMONES -> buildHormoneQuery()
            ProteinCategory.STORAGE -> buildStorageQuery()
            ProteinCategory.RECEPTORS -> buildReceptorQuery()
            ProteinCategory.MEMBRANE -> buildMembraneQuery()
            ProteinCategory.MOTOR -> buildMotorQuery()
            ProteinCategory.SIGNALING -> buildSignalingQuery()
            ProteinCategory.CHAPERONES -> buildChaperoneQuery()
            ProteinCategory.METABOLIC -> buildMetabolicQuery()
        }
    }
    
    // 아이폰과 동일한 효소 검색 쿼리 (CLI 테스트 완료: 12,333개)
    private fun buildEnzymeQuery(): String {
        return """
        {
            "type": "group",
            "logical_operator": "or",
            "nodes": [
                {
                    "type": "group",
                    "logical_operator": "or",
                    "nodes": [
                        {
                            "type": "terminal",
                            "service": "text",
                            "parameters": {
                                "attribute": "struct.title",
                                "operator": "contains_words",
                                "value": "enzyme",
                                "case_sensitive": false
                            }
                        },
                        {
                            "type": "terminal",
                            "service": "text",
                            "parameters": {
                                "attribute": "struct.title",
                                "operator": "contains_words",
                                "value": "kinase",
                                "case_sensitive": false
                            }
                        },
                        {
                            "type": "terminal",
                            "service": "text",
                            "parameters": {
                                "attribute": "struct.title",
                                "operator": "contains_words",
                                "value": "transferase",
                                "case_sensitive": false
                            }
                        },
                        {
                            "type": "terminal",
                            "service": "text",
                            "parameters": {
                                "attribute": "struct.title",
                                "operator": "contains_words",
                                "value": "hydrolase",
                                "case_sensitive": false
                            }
                        },
                        {
                            "type": "terminal",
                            "service": "text",
                            "parameters": {
                                "attribute": "struct.title",
                                "operator": "contains_words",
                                "value": "oxidoreductase",
                                "case_sensitive": false
                            }
                        }
                    ]
                },
                {
                    "type": "group",
                    "logical_operator": "and",
                    "nodes": [
                        {
                            "type": "terminal",
                            "service": "text",
                            "parameters": {
                                "attribute": "struct_keywords.pdbx_keywords",
                                "operator": "contains_words",
                                "value": "ENZYME",
                                "case_sensitive": false
                            }
                        },
                        {
                            "type": "terminal",
                            "service": "text",
                            "parameters": {
                                "attribute": "struct.title",
                                "operator": "contains_words",
                                "value": "protein",
                                "case_sensitive": false
                            }
                        }
                    ]
                }
            ]
        }
        """.trimIndent()
    }
    
    // 아이폰과 동일한 구조 단백질 검색 쿼리
    private fun buildStructuralQuery(): String {
        return """
        {
            "type": "group",
            "logical_operator": "or",
            "nodes": [
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "collagen",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "keratin",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "elastin",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "fibroin",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "laminin",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "intermediate filament",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "cytoskeleton",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "microtubule",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct_keywords.pdbx_keywords",
                        "operator": "contains_words",
                        "value": "structural protein",
                        "case_sensitive": false
                    }
                }
            ]
        }
        """.trimIndent()
    }
    
    // 아이폰과 동일한 방어 단백질 검색 쿼리
    private fun buildDefenseQuery(): String {
        return """
        {
            "type": "group",
            "logical_operator": "or",
            "nodes": [
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct_keywords.pdbx_keywords",
                        "operator": "contains_words",
                        "value": "IMMUNE SYSTEM",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct_keywords.pdbx_keywords",
                        "operator": "contains_words",
                        "value": "IMMUNOGLOBULIN",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct_keywords.pdbx_keywords",
                        "operator": "contains_words",
                        "value": "ANTIBODY",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct_keywords.pdbx_keywords",
                        "operator": "contains_words",
                        "value": "COMPLEMENT",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "antibody",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "immunoglobulin",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "complement",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "interferon",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "interleukin",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "cytokine",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "defensin",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "lysozyme",
                        "case_sensitive": false
                    }
                }
            ]
        }
        """.trimIndent()
    }
    // 아이폰과 동일한 운반 단백질 검색 쿼리
    private fun buildTransportQuery(): String {
        return """
        {
            "type": "group",
            "logical_operator": "or",
            "nodes": [
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct_keywords.pdbx_keywords",
                        "operator": "contains_words",
                        "value": "TRANSPORT PROTEIN",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct_keywords.pdbx_keywords",
                        "operator": "contains_words",
                        "value": "OXYGEN TRANSPORT",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct_keywords.pdbx_keywords",
                        "operator": "contains_words",
                        "value": "METAL TRANSPORT",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct_keywords.pdbx_keywords",
                        "operator": "contains_words",
                        "value": "ION TRANSPORT",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "hemoglobin",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "myoglobin",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "transferrin",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "albumin",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "transporter",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "channel",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "pump",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "carrier",
                        "case_sensitive": false
                    }
                }
            ]
        }
        """.trimIndent()
    }
    // 아이폰과 동일한 호르몬 검색 쿼리
    private fun buildHormoneQuery(): String {
        return """
        {
            "type": "group",
            "logical_operator": "or",
            "nodes": [
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct_keywords.pdbx_keywords",
                        "operator": "contains_words",
                        "value": "HORMONE",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct_keywords.pdbx_keywords",
                        "operator": "contains_words",
                        "value": "GROWTH FACTOR",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct_keywords.pdbx_keywords",
                        "operator": "contains_words",
                        "value": "CYTOKINE",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct_keywords.pdbx_keywords",
                        "operator": "contains_words",
                        "value": "SIGNALING PROTEIN",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "insulin",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "growth hormone",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "thyroid",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "glucagon",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "cortisol",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "estrogen",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "testosterone",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "cytokine",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "signaling",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "receptor",
                        "case_sensitive": false
                    }
                }
            ]
        }
        """.trimIndent()
    }
    // 아이폰과 동일한 저장 단백질 검색 쿼리
    private fun buildStorageQuery(): String {
        return """
        {
            "type": "group",
            "logical_operator": "or",
            "nodes": [
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "ferritin",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "albumin",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "casein",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "ovalbumin",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "lactoferrin",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "vitellogenin",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "transferrin",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "ceruloplasmin",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "storage",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "binding",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "reserve",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "depot",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "accumulation",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "sequestration",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "retention",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct_keywords.pdbx_keywords",
                        "operator": "contains_words",
                        "value": "STORAGE PROTEIN",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct_keywords.pdbx_keywords",
                        "operator": "contains_words",
                        "value": "METAL BINDING",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct_keywords.pdbx_keywords",
                        "operator": "contains_words",
                        "value": "LIGAND BINDING",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct_keywords.pdbx_keywords",
                        "operator": "contains_words",
                        "value": "PLANT PROTEIN",
                        "case_sensitive": false
                    }
                }
            ]
        }
        """.trimIndent()
    }
    // 아이폰과 동일한 수용체 검색 쿼리
    private fun buildReceptorQuery(): String {
        return """
        {
            "type": "group",
            "logical_operator": "or",
            "nodes": [
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct_keywords.pdbx_keywords",
                        "operator": "contains_words",
                        "value": "RECEPTOR",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct_keywords.pdbx_keywords",
                        "operator": "contains_words",
                        "value": "GPCR",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct_keywords.pdbx_keywords",
                        "operator": "contains_words",
                        "value": "LIGAND BINDING",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct_keywords.pdbx_keywords",
                        "operator": "contains_words",
                        "value": "SIGNALING",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "receptor",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "gpcr",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "neurotransmitter",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "ligand",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "agonist",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "antagonist",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "adrenergic",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "dopamine",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "serotonin",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "acetylcholine",
                        "case_sensitive": false
                    }
                }
            ]
        }
        """.trimIndent()
    }
    
    // 아이폰과 동일한 막 단백질 검색 쿼리
    private fun buildMembraneQuery(): String {
        return """
        {
            "type": "group",
            "logical_operator": "or",
            "nodes": [
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct_keywords.pdbx_keywords",
                        "operator": "contains_words",
                        "value": "MEMBRANE PROTEIN",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct_keywords.pdbx_keywords",
                        "operator": "contains_words",
                        "value": "TRANSMEMBRANE",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct_keywords.pdbx_keywords",
                        "operator": "contains_words",
                        "value": "INTEGRAL MEMBRANE",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct_keywords.pdbx_keywords",
                        "operator": "contains_words",
                        "value": "PERIPHERAL MEMBRANE",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "membrane",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "transmembrane",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "integral",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "peripheral",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "channel",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "pore",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "transporter",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "pump",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "barrier",
                        "case_sensitive": false
                    }
                }
            ]
        }
        """.trimIndent()
    }
    
    // 아이폰과 동일한 모터 단백질 검색 쿼리
    private fun buildMotorQuery(): String {
        return """
        {
            "type": "group",
            "logical_operator": "or",
            "nodes": [
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct_keywords.pdbx_keywords",
                        "operator": "contains_words",
                        "value": "MOTOR PROTEIN",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct_keywords.pdbx_keywords",
                        "operator": "contains_words",
                        "value": "CONTRACTILE PROTEIN",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct_keywords.pdbx_keywords",
                        "operator": "contains_words",
                        "value": "MUSCLE PROTEIN",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "kinesin",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "dynein",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "myosin",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "tropomyosin",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "troponin",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "actin",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "motor",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "movement",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "transport",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "cargo",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "microtubule",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "contraction",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "sliding",
                        "case_sensitive": false
                    }
                }
            ]
        }
        """.trimIndent()
    }
    
    // 아이폰과 동일한 신호전달 단백질 검색 쿼리
    private fun buildSignalingQuery(): String {
        return """
        {
            "type": "group",
            "logical_operator": "or",
            "nodes": [
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct_keywords.pdbx_keywords",
                        "operator": "contains_words",
                        "value": "SIGNALING PROTEIN",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct_keywords.pdbx_keywords",
                        "operator": "contains_words",
                        "value": "SIGNAL TRANSDUCTION",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct_keywords.pdbx_keywords",
                        "operator": "contains_words",
                        "value": "CELL SIGNALING",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct_keywords.pdbx_keywords",
                        "operator": "contains_words",
                        "value": "PATHWAY",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "signaling",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "pathway",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "cascade",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "transduction",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "messenger",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "factor",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "activation",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "regulation",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "response",
                        "case_sensitive": false
                    }
                }
            ]
        }
        """.trimIndent()
    }
    
    // 아이폰과 동일한 샤페론 검색 쿼리
    private fun buildChaperoneQuery(): String {
        return """
        {
            "type": "group",
            "logical_operator": "or",
            "nodes": [
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct_keywords.pdbx_keywords",
                        "operator": "contains_words",
                        "value": "CHAPERONE",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct_keywords.pdbx_keywords",
                        "operator": "contains_words",
                        "value": "HEAT SHOCK",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct_keywords.pdbx_keywords",
                        "operator": "contains_words",
                        "value": "PROTEIN FOLDING",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct_keywords.pdbx_keywords",
                        "operator": "contains_words",
                        "value": "MOLECULAR CHAPERONE",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "chaperone",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "chaperonin",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "heat shock",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "hsp",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "folding",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "assistance",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "quality",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "control",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "refolding",
                        "case_sensitive": false
                    }
                }
            ]
        }
        """.trimIndent()
    }
    
    // 아이폰과 동일한 대사 단백질 검색 쿼리
    private fun buildMetabolicQuery(): String {
        return """
        {
            "type": "group",
            "logical_operator": "or",
            "nodes": [
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct_keywords.pdbx_keywords",
                        "operator": "contains_words",
                        "value": "METABOLISM",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct_keywords.pdbx_keywords",
                        "operator": "contains_words",
                        "value": "METABOLIC PATHWAY",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct_keywords.pdbx_keywords",
                        "operator": "contains_words",
                        "value": "BIOSYNTHESIS",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct_keywords.pdbx_keywords",
                        "operator": "contains_words",
                        "value": "CATABOLISM",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct_keywords.pdbx_keywords",
                        "operator": "contains_words",
                        "value": "ANABOLISM",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "metabolic",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "metabolism",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "glycolysis",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "citric acid",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "biosynthesis",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "catabolism",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "anabolism",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "fatty acid",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "amino acid",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "nucleotide",
                        "case_sensitive": false
                    }
                },
                {
                    "type": "terminal",
                    "service": "text",
                    "parameters": {
                        "attribute": "struct.title",
                        "operator": "contains_words",
                        "value": "carbohydrate",
                        "case_sensitive": false
                    }
                }
            ]
        }
        """.trimIndent()
    }
    
    private fun buildSimpleCategoryQuery(searchTerm: String): String {
        return """
        {
            "type": "terminal",
            "service": "text",
            "parameters": {
                "attribute": "struct.title",
                "operator": "contains_words",
                "value": "$searchTerm"
            }
        }
        """.trimIndent()
    }
    
    /**
     * 아이폰과 동일한 PDB ID 검색
     */
    suspend fun searchProteinByID(pdbId: String): ProteinInfo? {
        android.util.Log.d("PDBAPIService", "🔍 PDB ID 검색: $pdbId")
        
        if (!isValidPDBID(pdbId)) {
            android.util.Log.w("PDBAPIService", "❌ 유효하지 않은 PDB ID: $pdbId")
            return null
        }
        
        try {
            val query = buildPDBIDSearchQuery(pdbId)
            val response = executeSearchQuery(query)
            
            if (response.isSuccessful) {
                val responseBody = response.body?.string()
                if (!responseBody.isNullOrEmpty()) {
                    val proteinInfo = parseProteinDetail(responseBody, pdbId)
                    android.util.Log.d("PDBAPIService", "✅ PDB ID $pdbId 검색 성공")
                    return proteinInfo
                }
            }
            
            android.util.Log.w("PDBAPIService", "❌ PDB ID 검색 결과 없음: $pdbId")
            return null
            
        } catch (e: Exception) {
            android.util.Log.e("PDBAPIService", "❌ PDB ID 검색 실패: ${e.message}")
            return null
        }
    }
    
    /**
     * Ligands 검색 (하이라이트 및 focus 기능용)
     */
    suspend fun searchLigands(proteinId: String): List<LigandInfo> {
        android.util.Log.d("PDBAPIService", "🔍 Ligands 검색: $proteinId")
        
        try {
            val url = "$dataBaseURL/entry/$proteinId/ligand"
            val request = Request.Builder()
                .url(url)
                .get()
                .build()
            
            val response = client.newCall(request).execute()
            
            if (response.isSuccessful) {
                val responseBody = response.body?.string()
                if (!responseBody.isNullOrEmpty()) {
                    val ligands = parseLigandsResponse(responseBody)
                    android.util.Log.d("PDBAPIService", "✅ Ligands 검색 성공: ${ligands.size}개")
                    return ligands
                }
            }
            
            android.util.Log.w("PDBAPIService", "❌ Ligands 검색 결과 없음: $proteinId")
            return emptyList()
            
        } catch (e: Exception) {
            android.util.Log.e("PDBAPIService", "❌ Ligands 검색 실패: ${e.message}")
            return emptyList()
        }
    }
    
    /**
     * Ligands 응답 파싱
     */
    private fun parseLigandsResponse(responseBody: String): List<LigandInfo> {
        return try {
            val jsonObject = JSONObject(responseBody)
            val ligands = mutableListOf<LigandInfo>()
            
            // PDB API의 ligand 구조에 따라 파싱
            if (jsonObject.has("ligand")) {
                val ligandArray = jsonObject.getJSONArray("ligand")
                for (i in 0 until ligandArray.length()) {
                    val ligand = ligandArray.getJSONObject(i)
                    val ligandInfo = LigandInfo(
                        id = ligand.optString("pdbx_chem_comp_id", ""),
                        name = ligand.optString("pdbx_chem_comp_name", ""),
                        formula = ligand.optString("formula", ""),
                        molecularWeight = ligand.optDouble("formula_weight", 0.0),
                        type = ligand.optString("pdbx_type", ""),
                        description = ligand.optString("pdbx_description", ""),
                        isHighlighted = false,
                        isFocused = false
                    )
                    ligands.add(ligandInfo)
                }
            }
            
            ligands
        } catch (e: Exception) {
            android.util.Log.e("PDBAPIService", "❌ Ligands 파싱 실패: ${e.message}")
            emptyList()
        }
    }
    
    /**
     * 아이폰과 동일한 텍스트 검색
     */
    suspend fun searchProteinsByText(searchText: String, limit: Int = 100): List<ProteinInfo> {
        android.util.Log.d("PDBAPIService", "🔍 텍스트 검색: '$searchText'")
        
        try {
            val query = buildTextSearchQuery(searchText, limit)
            val response = executeSearchQuery(query)
            
            if (response.isSuccessful) {
                val responseBody = response.body?.string()
                if (!responseBody.isNullOrEmpty()) {
                    val searchResponse = parseSearchResponse(responseBody)
                    val proteins = searchResponse.map { entry ->
                        ProteinInfo(
                            id = entry.safeIdentifier,
                            name = entry.title ?: "Unknown Protein",
                            category = inferCategoryFromTitle(entry.title ?: ""),
                            description = entry.title ?: "No description available",
                            keywords = listOf()
                        )
                    }
                    android.util.Log.d("PDBAPIService", "✅ 텍스트 검색 성공: ${proteins.size}개")
                    return proteins
                }
            }
            
            android.util.Log.w("PDBAPIService", "❌ 텍스트 검색 결과 없음: $searchText")
            return emptyList()
            
        } catch (e: Exception) {
            android.util.Log.e("PDBAPIService", "❌ 텍스트 검색 실패: ${e.message}")
            return emptyList()
        }
    }
    
    /**
     * PDB ID 유효성 검사 (아이폰과 동일)
     */
    private fun isValidPDBID(id: String): Boolean {
        val trimmed = id.trim()
        return trimmed.length == 4 && trimmed.all { it.isLetterOrDigit() }
    }
    
    /**
     * PDB ID 검색 쿼리 생성 (아이폰과 동일)
     */
    private fun buildPDBIDSearchQuery(pdbId: String): String {
        return """
        {
            "query": {
                "type": "terminal",
                "service": "text",
                "parameters": {
                    "attribute": "rcsb_entry_container_identifiers.entry_id",
                    "operator": "exact_match",
                    "value": "$pdbId"
                }
            },
            "return_type": "entry",
            "request_options": {
                "paginate": {
                    "start": 0,
                    "rows": 1
                }
            }
        }
        """.trimIndent()
    }
    
    /**
     * 텍스트 검색 쿼리 생성 (아이폰과 동일)
     */
    private fun buildTextSearchQuery(searchText: String, limit: Int): String {
        return """
        {
            "query": {
                "type": "terminal",
                "service": "text",
                "parameters": {
                    "attribute": "struct.title",
                    "operator": "contains_words",
                    "value": "$searchText"
                }
            },
            "return_type": "entry",
            "request_options": {
                "paginate": {
                    "start": 0,
                    "rows": $limit
                }
            }
        }
        """.trimIndent()
    }
    
    
    /**
     * Ligands 하이라이트 기능
     */
    suspend fun highlightLigands(proteinId: String, ligandIds: List<String>): List<LigandInfo> {
        android.util.Log.d("PDBAPIService", "🎯 Ligands 하이라이트: $proteinId, ligands: $ligandIds")
        
        val allLigands = searchLigands(proteinId)
        return allLigands.map { ligand ->
            ligand.copy(
                isHighlighted = ligandIds.contains(ligand.id)
            )
        }
    }
    
    /**
     * Ligands focus 기능
     */
    suspend fun focusLigands(proteinId: String, ligandId: String): LigandInfo? {
        android.util.Log.d("PDBAPIService", "🔍 Ligand focus: $proteinId, ligand: $ligandId")
        
        val allLigands = searchLigands(proteinId)
        return allLigands.find { it.id == ligandId }?.copy(
            isFocused = true
        )
    }
    
    /**
     * Ligands 하이라이트 및 focus 조합 기능
     */
    suspend fun highlightAndFocusLigands(
        proteinId: String, 
        highlightIds: List<String>, 
        focusId: String?
    ): List<LigandInfo> {
        android.util.Log.d("PDBAPIService", "🎯🔍 Ligands 하이라이트+focus: $proteinId")
        
        val allLigands = searchLigands(proteinId)
        return allLigands.map { ligand ->
            ligand.copy(
                isHighlighted = highlightIds.contains(ligand.id),
                isFocused = ligand.id == focusId
            )
        }
    }
    
    /**
     * Ligands 기능 테스트용 샘플 데이터
     */
    fun getSampleLigands(proteinId: String): List<LigandInfo> {
        android.util.Log.d("PDBAPIService", "🧪 샘플 Ligands 생성: $proteinId")
        
        return listOf(
            LigandInfo(
                id = "ATP",
                name = "Adenosine triphosphate",
                formula = "C10H16N5O13P3",
                molecularWeight = 507.18,
                type = "Nucleotide",
                description = "Energy currency of the cell",
                isHighlighted = false,
                isFocused = false
            ),
            LigandInfo(
                id = "ADP",
                name = "Adenosine diphosphate",
                formula = "C10H15N5O10P2",
                molecularWeight = 427.20,
                type = "Nucleotide",
                description = "ATP precursor",
                isHighlighted = true,
                isFocused = false
            ),
            LigandInfo(
                id = "AMP",
                name = "Adenosine monophosphate",
                formula = "C10H14N5O7P",
                molecularWeight = 347.22,
                type = "Nucleotide",
                description = "Basic nucleotide unit",
                isHighlighted = false,
                isFocused = true
            )
        )
    }
    
    /**
     * 제목에서 카테고리 추론
     */
    private fun inferCategoryFromTitle(title: String): ProteinCategory {
        val lowerTitle = title.lowercase()
        return when {
            lowerTitle.contains("enzyme") || lowerTitle.contains("kinase") -> ProteinCategory.ENZYMES
            lowerTitle.contains("structural") || lowerTitle.contains("collagen") -> ProteinCategory.STRUCTURAL
            lowerTitle.contains("antibody") || lowerTitle.contains("immune") -> ProteinCategory.DEFENSE
            lowerTitle.contains("transport") || lowerTitle.contains("hemoglobin") -> ProteinCategory.TRANSPORT
            lowerTitle.contains("hormone") || lowerTitle.contains("insulin") -> ProteinCategory.HORMONES
            lowerTitle.contains("storage") || lowerTitle.contains("ferritin") -> ProteinCategory.STORAGE
            lowerTitle.contains("receptor") || lowerTitle.contains("gpcr") -> ProteinCategory.RECEPTORS
            lowerTitle.contains("membrane") || lowerTitle.contains("channel") -> ProteinCategory.MEMBRANE
            lowerTitle.contains("motor") || lowerTitle.contains("myosin") -> ProteinCategory.MOTOR
            lowerTitle.contains("signaling") || lowerTitle.contains("pathway") -> ProteinCategory.SIGNALING
            lowerTitle.contains("chaperone") || lowerTitle.contains("hsp") -> ProteinCategory.CHAPERONES
            lowerTitle.contains("metabolic") || lowerTitle.contains("metabolism") -> ProteinCategory.METABOLIC
            else -> ProteinCategory.ENZYMES // 기본값
        }
    }
}